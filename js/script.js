console.log('üöÄ VTPA Payroll System - Debug Mode Activated');

// Backend URL configuration
const BACKEND_URL = 'https://vtpa-payroll-backend.onrender.com'; // Online backend
// const BACKEND_URL = 'http://localhost:3001'; // Local backend (uncomment for local testing)

console.log('üîó Backend URL:', BACKEND_URL);

// Global variables
let currentEmployeeData = null;
let employeesData = [];

// Utility functions
function showToast(message, type = 'success') {
    console.log(`üì¢ Toast: ${type} - ${message}`);
    const toast = document.getElementById('toast');
    toast.textContent = message;
    toast.className = `toast ${type}`;
    toast.style.display = 'block';
    
    setTimeout(() => {
        toast.style.display = 'none';
    }, 3000);
}

function showError(message) {
    console.error(`‚ùå Error: ${message}`);
    showToast(message, 'error');
}

function showSuccess(message) {
    console.log(`‚úÖ Success: ${message}`);
    showToast(message, 'success');
}

function setButtonLoading(button, loading) {
    const spinner = button.querySelector('.loading-spinner');
    if (loading) {
        button.classList.add('loading');
        button.disabled = true;
        if (spinner) spinner.style.display = 'inline-block';
    } else {
        button.classList.remove('loading');
        button.disabled = false;
        if (spinner) spinner.style.display = 'none';
    }
}

// Tab switching
function initializeTabs() {
    console.log('üîß Initializing tabs...');
    document.querySelectorAll('.tab-btn').forEach(button => {
        button.addEventListener('click', function() {
            console.log(`üìë Switching to tab: ${this.dataset.tab}`);
            
            // Update tab buttons
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('bg-blue-500', 'text-white');
                btn.classList.add('text-gray-600');
            });
            this.classList.add('bg-blue-500', 'text-white');
            this.classList.remove('text-gray-600');
            
            // Update tab content
            document.querySelectorAll('.tab-content').forEach(content => {
                content.style.display = 'none';
            });
            document.getElementById(`tab-${this.dataset.tab}`).style.display = 'block';
        });
    });
}

// Employee data collection
function getEmployeeData() {
    try {
        const baseSalary = parseInt(document.getElementById('baseSalary').value) || 0;
        const percentage = parseInt(document.getElementById('salaryPercentage').value) || 100;
        const workDays = parseInt(document.getElementById('workDays').value) || 0;
        
        // Calculate effective salary (applying percentage only to base salary)
        const effectiveSalary = baseSalary * (percentage / 100);
        const actualSalary = Math.min(effectiveSalary * (workDays / 24), effectiveSalary);
        
        const data = {
            fullName: document.getElementById('fullName').value || '',
            employeeId: document.getElementById('employeeId').value || '',
            department: document.getElementById('department').value || '',
            position: document.getElementById('position').value || '',
            email: document.getElementById('email').value || '',
            workDays: workDays,
            baseSalary: baseSalary,
            salaryPercentage: percentage,
            carsigned: parseInt(document.getElementById('carsigned').value) || 0,
            
            // Income (other than base salary - no percentage applied)
            actualSalary: actualSalary,
            overtime: parseInt(document.getElementById('overtime').value) || 0,
            bonus: parseInt(document.getElementById('bonus').value) || 0,
            mealAllowance: parseInt(document.getElementById('mealAllowance').value) || 0,
            responsibilityAllowance: parseInt(document.getElementById('responsibilityAllowance').value) || 0,
            
            // Deductions
            socialInsurance: parseInt(document.getElementById('socialInsurance').value) || 0,
            mealDeduction: parseInt(document.getElementById('mealDeduction').value) || 0,
            regulationDeduction: parseInt(document.getElementById('regulationDeduction').value) || 0,
            incomeTax: parseInt(document.getElementById('incomeTax').value) || 0,
            otherDeduction: parseInt(document.getElementById('otherDeduction').value) || 0
        };
        
        // Calculate totals
        data.totalIncome = data.actualSalary + data.overtime + data.bonus + data.mealAllowance + data.responsibilityAllowance;
        data.totalDeduction = data.socialInsurance + data.mealDeduction + data.regulationDeduction + data.incomeTax + data.otherDeduction;
        data.netSalary = data.totalIncome - data.totalDeduction;
        
        console.log('üìä Employee data collected:', data);
        return data;
    } catch (error) {
        console.error('‚ùå Error collecting employee data:', error);
        throw error;
    }
}

// Number formatting
function formatNumber(num) {
    return new Intl.NumberFormat('vi-VN').format(num);
}

function numberToWords(num) {
    // Simplified Vietnamese number to words conversion
    const units = ['', 'ngh√¨n', 'tri·ªáu', 't·ª∑'];
    const digits = ['kh√¥ng', 'm·ªôt', 'hai', 'ba', 'b·ªën', 'nƒÉm', 's√°u', 'b·∫£y', 't√°m', 'ch√≠n'];
    
    if (num === 0) return 'kh√¥ng ƒë·ªìng';
    
    let result = '';
    let unitIndex = 0;
    
    while (num > 0) {
        const chunk = num % 1000;
        if (chunk > 0) {
            let chunkText = '';
            
            const hundreds = Math.floor(chunk / 100);
            const tens = Math.floor((chunk % 100) / 10);
            const ones = chunk % 10;
            
            if (hundreds > 0) {
                chunkText += digits[hundreds] + ' trƒÉm ';
            }
            
            if (tens > 1) {
                chunkText += digits[tens] + ' m∆∞·ªùi ';
            } else if (tens === 1) {
                chunkText += 'm∆∞·ªùi ';
            }
            
            if (ones > 0) {
                chunkText += digits[ones] + ' ';
            }
            
            result = chunkText + units[unitIndex] + ' ' + result;
        }
        
        num = Math.floor(num / 1000);
        unitIndex++;
    }
    
    return result.trim() + ' ƒë·ªìng';
}

// Calculate salary
function calculateSalary() {
    console.log('üßÆ Calculating salary...');
    try {
        const data = getEmployeeData();
        
        // Update display
        document.getElementById('actualSalary').textContent = formatNumber(data.actualSalary) + ' VNƒê';
        document.getElementById('totalIncome').textContent = formatNumber(data.totalIncome) + ' VNƒê';
        document.getElementById('totalDeduction').textContent = formatNumber(data.totalDeduction) + ' VNƒê';
        document.getElementById('netSalary').textContent = formatNumber(data.netSalary) + ' VNƒê';
        
        document.getElementById('calculationResults').style.display = 'block';
        
        showSuccess('T√≠nh to√°n ho√†n th√†nh!');
        console.log('‚úÖ Salary calculated successfully');
        
        return data;
    } catch (error) {
        console.error('‚ùå Calculation error:', error);
        showError('L·ªói t√≠nh to√°n: ' + error.message);
        return null;
    }
}

// Generate payroll HTML
function generatePayrollHTML(data) {
    console.log('üìÑ Generating payroll HTML for:', data.fullName);
    
    const currentDate = new Date();
    const month = String(currentDate.getMonth() + 1).padStart(2, '0');
    const year = currentDate.getFullYear();
    
    return `
        <div class="payroll-preview">
            <div style="text-align: center; margin-bottom: 15px;">
                <div style="display: flex; align-items: center; justify-content: center; margin-bottom: 10px;">
                    <img src="https://btbinh2710.github.io/vtpa-payroll/logo.jpg" crossOrigin="anonymous" 
                         style="height: 40px; margin-right: 15px;" 
                         onerror="this.style.display='none'">
                    <div>
                        <div style="font-size: 16px; font-weight: bold; margin-bottom: 3px;">C√îNG TY C·ªî PH·∫¶N 27-7 H·ªíNG QUANG</div>
                        <div style="font-size: 11px; margin-bottom: 2px;">Km2+500, ƒë∆∞·ªùng Phan Tr·ªçng Tu·ªá, Thanh Li·ªát, Thanh Tr√¨, H√† N·ªôi</div>
                        <div style="font-size: 11px;">MST: 0102147234 - Hotline: 0902279898</div>
                    </div>
                </div>
            </div>
            
            <h2 style="text-align: center; font-size: 14px; font-weight: bold; margin: 15px 0;">
                B·∫¢NG TH√îNG B√ÅO L∆Ø∆†NG TH√ÅNG ${month}/${year}
            </h2>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 15px; font-size: 11px;">
                <div>
                    <div style="margin-bottom: 3px;"><strong>H·ªç v√† t√™n:</strong> ${data.fullName}</div>
                    <div style="margin-bottom: 3px;"><strong>B·ªô ph·∫≠n/Chi nh√°nh:</strong> ${data.department}</div>
                    <div style="margin-bottom: 3px;"><strong>Ng√†y c√¥ng th·ª±c t·∫ø:</strong> ${data.workDays}</div>
                    <div style="margin-bottom: 3px;"><strong>S·ªë xe k√Ω trong th√°ng:</strong> ${data.carsigned}</div>
                </div>
                <div>
                    <div style="margin-bottom: 3px;"><strong>M√£ nh√¢n vi√™n:</strong> ${data.employeeId}</div>
                    <div style="margin-bottom: 3px;"><strong>Ch·ª©c v·ª•:</strong> ${data.position}</div>
                    <div style="margin-bottom: 3px;"><strong>M·ª©c l∆∞∆°ng:</strong> ${formatNumber(data.baseSalary)}</div>
                    <div style="margin-bottom: 3px;"><strong>T·ª∑ l·ªá h∆∞·ªüng:</strong> ${data.salaryPercentage}%</div>
                </div>
            </div>
            
            <table style="width: 100%; border-collapse: collapse; font-size: 10px; margin-bottom: 15px;">
                <thead>
                    <tr style="background-color: #f5f5f5;">
                        <th style="border: 1px solid #ddd; padding: 4px; width: 8%; text-align: center;">STT</th>
                        <th style="border: 1px solid #ddd; padding: 4px; width: 60%; text-align: left;">Kho·∫£n m·ª•c</th>
                        <th style="border: 1px solid #ddd; padding: 4px; width: 20%; text-align: right;">S·ªë ti·ªÅn (VNƒê)</th>
                        <th style="border: 1px solid #ddd; padding: 4px; width: 12%; text-align: left;">Ghi ch√∫</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: center; font-weight: bold;">I</td>
                        <td style="border: 1px solid #ddd; padding: 4px; font-weight: bold;">THU NH·∫¨P</td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: center;">1</td>
                        <td style="border: 1px solid #ddd; padding: 4px;">L∆∞∆°ng</td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                        <td style="border: 1px solid #ddd; padding: 4px; padding-left: 15px;">L∆∞∆°ng th·ª±c t·∫ø (${data.workDays} c√¥ng)</td>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: right;">${formatNumber(data.actualSalary)}</td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                        <td style="border: 1px solid #ddd; padding: 4px; padding-left: 15px;">L∆∞∆°ng tƒÉng ca</td>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: right;">${formatNumber(data.overtime)}</td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                        <td style="border: 1px solid #ddd; padding: 4px; padding-left: 15px;">Th∆∞·ªüng</td>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: right;">${formatNumber(data.bonus)}</td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: center;">2</td>
                        <td style="border: 1px solid #ddd; padding: 4px;">Ph·ª• c·∫•p</td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                        <td style="border: 1px solid #ddd; padding: 4px; padding-left: 15px;">Ph·ª• c·∫•p ti·ªÅn ƒÉn</td>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: right;">${formatNumber(data.mealAllowance)}</td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                        <td style="border: 1px solid #ddd; padding: 4px; padding-left: 15px;">Ph·ª• c·∫•p tr√°ch nhi·ªám</td>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: right;">${formatNumber(data.responsibilityAllowance)}</td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                    </tr>
                    <tr style="background-color: #f9f9f9; font-weight: bold;">
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                        <td style="border: 1px solid #ddd; padding: 4px;">T·ªîNG THU NH·∫¨P (I)</td>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: right;">${formatNumber(data.totalIncome)}</td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: center; font-weight: bold;">II</td>
                        <td style="border: 1px solid #ddd; padding: 4px; font-weight: bold;">KH·∫§U TR·ª™</td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: center;">1</td>
                        <td style="border: 1px solid #ddd; padding: 4px;">BHXH</td>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: right;">${formatNumber(data.socialInsurance)}</td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: center;">2</td>
                        <td style="border: 1px solid #ddd; padding: 4px;">Kh·∫•u tr·ª´ ti·ªÅn ƒÉn</td>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: right;">${formatNumber(data.mealDeduction)}</td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: center;">3</td>
                        <td style="border: 1px solid #ddd; padding: 4px;">Kh·∫•u tr·ª´ qui ch·∫ø</td>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: right;">${formatNumber(data.regulationDeduction)}</td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: center;">4</td>
                        <td style="border: 1px solid #ddd; padding: 4px;">Thu·∫ø TNCN</td>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: right;">${formatNumber(data.incomeTax)}</td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                    </tr>
                    <tr>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: center;">5</td>
                        <td style="border: 1px solid #ddd; padding: 4px;">Kh·∫•u tr·ª´ kh√°c</td>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: right;">${formatNumber(data.otherDeduction)}</td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                    </tr>
                    <tr style="background-color: #f9f9f9; font-weight: bold;">
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                        <td style="border: 1px solid #ddd; padding: 4px;">T·ªîNG KH·∫§U TR·ª™ (II)</td>
                        <td style="border: 1px solid #ddd; padding: 4px; text-align: right;">${formatNumber(data.totalDeduction)}</td>
                        <td style="border: 1px solid #ddd; padding: 4px;"></td>
                    </tr>
                    <tr style="background-color: #e6f3ff; font-weight: bold; font-size: 11px;">
                        <td style="border: 1px solid #ddd; padding: 6px;"></td>
                        <td style="border: 1px solid #ddd; padding: 6px;">TH·ª∞C Lƒ®NH (I - II)</td>
                        <td style="border: 1px solid #ddd; padding: 6px; text-align: right;">${formatNumber(data.netSalary)}</td>
                        <td style="border: 1px solid #ddd; padding: 6px;"></td>
                    </tr>
                </tbody>
            </table>
            
            <div style="margin-bottom: 15px; font-size: 11px;">
                <strong>B·∫±ng ch·ªØ:</strong> ${numberToWords(data.netSalary).charAt(0).toUpperCase() + numberToWords(data.netSalary).slice(1)}
            </div>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px; margin-bottom: 15px; font-size: 11px;">
                <div style="text-align: center;">
                    <div style="font-weight: bold; margin-bottom: 40px;">NG∆Ø·ªúI L·∫¨P B·∫¢NG</div>
                    <div>(K√Ω, ghi r√µ h·ªç t√™n)</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-weight: bold; margin-bottom: 40px;">NG∆Ø·ªúI NH·∫¨N</div>
                    <div>(K√Ω, ghi r√µ h·ªç t√™n)</div>
                </div>
            </div>
            
            <div style="font-size: 9px; line-height: 1.3;">
                <strong>Ghi ch√∫:</strong>
                <div style="margin-top: 5px;">
                    - B·∫£ng l∆∞∆°ng n√†y c√≥ gi√° tr·ªã thay th·∫ø cho phi·∫øu l∆∞∆°ng v√† ch·ªâ ƒë∆∞·ª£c ph√°t h√†nh m·ªôt l·∫ßn.<br>
                    - N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá ph√≤ng Nh√¢n s·ª± trong v√≤ng 3 ng√†y l√†m vi·ªác k·ªÉ t·ª´ ng√†y nh·∫≠n b·∫£ng l∆∞∆°ng.<br>
                    - B·∫£ng l∆∞∆°ng n√†y ƒë∆∞·ª£c l·∫≠p th√†nh 02 b·∫£n, 01 b·∫£n C√¥ng ty l∆∞u v√† 01 b·∫£n ng∆∞·ªùi lao ƒë·ªông gi·ªØ.
                </div>
            </div>
        </div>
    `;
}

// Debug Preview Function
function debugPreview(employeeData = null) {
    console.log('üîç Preview clicked for:', employeeData?.fullName || 'manual input');
    try {
        const data = employeeData || getEmployeeData();
        if (!data) throw new Error('Kh√¥ng c√≥ d·ªØ li·ªáu nh√¢n vi√™n');
        
        currentEmployeeData = data;
        const html = generatePayrollHTML(data);
        document.getElementById('previewContent').innerHTML = html;
        document.getElementById('previewModal').style.display = 'block';
        
        console.log('‚úÖ Preview modal opened');
        showSuccess('Xem tr∆∞·ªõc b·∫£ng l∆∞∆°ng th√†nh c√¥ng!');
    } catch (error) {
        console.error('‚ùå Preview error:', error);
        showError('L·ªói xem tr∆∞·ªõc: ' + error.message);
    }
}

// Font DejaVu Sans base64 (placeholder, replace with actual base64)
const dejavuSans = 'data:application/x-font-ttf;base64,...'; // Thay b·∫±ng base64 c·ªßa DejaVuSans.ttf

// Debug Export Function
function debugExport(employeeData = null) {
    console.log('üìÑ Export clicked for:', employeeData?.fullName || 'manual input');
    try {
        const data = employeeData || getEmployeeData();
        if (!data) throw new Error('Kh√¥ng c√≥ d·ªØ li·ªáu nh√¢n vi√™n');
        
        const fileName = `BangLuong_${data.fullName.replace(/\s+/g, '')}_${new Date().getMonth() + 1}-${new Date().getFullYear()}.pdf`;
        
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = generatePayrollHTML(data);
        tempDiv.style.position = 'absolute';
        tempDiv.style.left = '-9999px';
        document.body.appendChild(tempDiv);
        
        html2canvas(tempDiv, {
            scale: 2,
            useCORS: true,
            allowTaint: true
        }).then(canvas => {
            const { jsPDF } = window.jspdf;
            const pdf = new jsPDF('p', 'mm', 'a4');
            
            // Add DejaVu Sans font
            pdf.addFileToVFS('DejaVuSans.ttf', dejavuSans);
            pdf.addFont('DejaVuSans.ttf', 'DejaVuSans', 'normal');
            pdf.setFont('DejaVuSans');
            
            const imgData = canvas.toDataURL('image/png');
            const imgWidth = 210;
            const pageHeight = 297;
            const imgHeight = (canvas.height * imgWidth) / canvas.width;
            
            pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, Math.min(imgHeight, pageHeight));
            pdf.save(fileName);
            
            document.body.removeChild(tempDiv);
            console.log('‚úÖ PDF exported successfully');
            showSuccess('Xu·∫•t PDF th√†nh c√¥ng!');
        }).catch(error => {
            document.body.removeChild(tempDiv);
            throw error;
        });
        
    } catch (error) {
        console.error('‚ùå Export error:', error);
        showError('L·ªói xu·∫•t PDF: ' + error.message);
    }
}

// Debug Email Function
function debugEmail(employeeData) {
    console.log('üìß Email clicked for:', employeeData.fullName);
    try {
        if (!employeeData.email) {
            throw new Error('Nh√¢n vi√™n ch∆∞a c√≥ email');
        }

        // G·ª≠i request t·ªõi backend
        fetch(`${BACKEND_URL}/api/send-email`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                to: employeeData.email,
                subject: `B·∫£ng l∆∞∆°ng th√°ng ${new Date().getMonth() + 1}/${new Date().getFullYear()} - ${employeeData.fullName}`,
                html: generatePayrollHTML(employeeData)
            })
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                showSuccess(`ƒê√£ g·ª≠i email cho ${employeeData.fullName}`);
            } else {
                showError('L·ªói g·ª≠i email: ' + data.message);
            }
        })
        .catch(err => {
            showError('L·ªói g·ª≠i email: ' + err.message);
        });
        
    } catch (error) {
        console.error('‚ùå Email error:', error);
        showError('L·ªói g·ª≠i email: ' + error.message);
    }
}

// Debug Upload Function
function debugUpload(file) {
    console.log('üìä Upload clicked:', file.name);
    try {
        const reader = new FileReader();
        reader.onload = function(e) {
            try {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, { type: 'array' });
                const sheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[sheetName];
                const jsonData = XLSX.utils.sheet_to_json(worksheet);
                
                // Process and display employee data
                employeesData = jsonData.map(row => ({
                    fullName: row['H·ªç v√† t√™n'] || '',
                    employeeId: row['M√£ nh√¢n vi√™n'] || '',
                    department: row['B·ªô ph·∫≠n'] || 'VF PTT H√Ä N·ªòI',
                    position: row['Ch·ª©c v·ª•'] || 'TVBH',
                    email: row['Email'] || '',
                    workDays: parseInt(row['Ng√†y c√¥ng th·ª±c t·∫ø']) || 25,
                    baseSalary: parseInt(row['M·ª©c l∆∞∆°ng']) || 0,
                    salaryPercentage: parseInt(row['T·ª∑ l·ªá h∆∞·ªüng']) || 100,
                    carsigned: parseInt(row['S·ªë xe k√Ω']) || 0,
                    overtime: parseInt(row['L∆∞∆°ng tƒÉng ca']) || 0,
                    bonus: parseInt(row['Th∆∞·ªüng']) || 0,
                    mealAllowance: parseInt(row['Ph·ª• c·∫•p ƒÉn']) || 0,
                    responsibilityAllowance: parseInt(row['Ph·ª• c·∫•p tr√°ch nhi·ªám']) || 0,
                    socialInsurance: parseInt(row['BHXH']) || 0,
                    mealDeduction: parseInt(row['Kh·∫•u tr·ª´ ƒÉn']) || 0,
                    regulationDeduction: parseInt(row['Kh·∫•u tr·ª´ qui ch·∫ø']) || 0,
                    incomeTax: parseInt(row['Thu·∫ø TNCN']) || 0,
                    otherDeduction: parseInt(row['Kh·∫•u tr·ª´ kh√°c']) || 0
                }));
                
                // Calculate for each employee
                employeesData.forEach(emp => {
                    const effectiveSalary = emp.baseSalary * (emp.salaryPercentage / 100);
                    emp.actualSalary = Math.min(effectiveSalary * (emp.workDays / 24), effectiveSalary);
                    emp.totalIncome = emp.actualSalary + emp.overtime + emp.bonus + emp.mealAllowance + emp.responsibilityAllowance;
                    emp.totalDeduction = emp.socialInsurance + emp.mealDeduction + emp.regulationDeduction + emp.incomeTax + emp.otherDeduction;
                    emp.netSalary = emp.totalIncome - emp.totalDeduction;
                });
                
                displayEmployeeTable(employeesData);
                console.log('‚úÖ Excel processed:', employeesData.length, 'employees');
                showSuccess(`ƒê√£ x·ª≠ l√Ω ${employeesData.length} nh√¢n vi√™n t·ª´ Excel`);
                
            } catch (error) {
                throw new Error('L·ªói ƒë·ªçc file Excel: ' + error.message);
            }
        };
        reader.readAsArrayBuffer(file);
        
    } catch (error) {
        console.error('‚ùå Upload error:', error);
        showError('L·ªói upload Excel: ' + error.message);
    }
}

// Debug Connection Function
function debugConnection() {
    console.log('‚öôÔ∏è Test connection clicked');
    const button = document.getElementById('testConnectionBtn');
    setButtonLoading(button, true);
    
    try {
        // Test k·∫øt n·ªëi SMTP v·ªõi backend
        fetch(`${BACKEND_URL}/api/test-connection`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        })
        .then(res => res.json())
        .then(data => {
            setButtonLoading(button, false);
            if (data.success) {
                console.log('‚úÖ SMTP connection successful');
                showSuccess('K·∫øt n·ªëi email th√†nh c√¥ng!');
            } else {
                console.error('‚ùå SMTP connection failed');
                showError('L·ªói k·∫øt n·ªëi: ' + data.message);
            }
        })
        .catch(err => {
            setButtonLoading(button, false);
            console.error('‚ùå Connection error:', err);
            showError('L·ªói k·∫øt n·ªëi: ' + err.message);
        });
        
    } catch (error) {
        setButtonLoading(button, false);
        console.error('‚ùå Connection error:', error);
        showError('L·ªói k·∫øt n·ªëi: ' + error.message);
    }
}

// Display employee table
function displayEmployeeTable(employees) {
    const tbody = document.getElementById('employeeTableBody');
    tbody.innerHTML = '';
    
    employees.forEach((emp, index) => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td class="px-4 py-2 border-b">${emp.fullName}</td>
            <td class="px-4 py-2 border-b">${emp.employeeId}</td>
            <td class="px-4 py-2 border-b">${formatNumber(emp.baseSalary)}</td>
            <td class="px-4 py-2 border-b">${emp.salaryPercentage}%</td>
            <td class="px-4 py-2 border-b">${emp.workDays}</td>
            <td class="px-4 py-2 border-b">${emp.email}</td>
            <td class="px-4 py-2 border-b text-center">
                <button class="btn-debug bg-blue-500 hover:bg-blue-600 text-white px-2 py-1 rounded mr-1 text-sm" onclick="debugPreview(employeesData[${index}])">
                    üëÅÔ∏è
                </button>
                <button class="btn-debug bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded mr-1 text-sm" onclick="debugExport(employeesData[${index}])">
                    üìÑ
                </button>
                <button class="btn-debug bg-purple-500 hover:bg-purple-600 text-white px-2 py-1 rounded text-sm" onclick="debugEmail(employeesData[${index}])">
                    üìß
                </button>
            </td>
        `;
        tbody.appendChild(row);
    });
    
    document.getElementById('employeeTable').style.display = 'block';
}

// Download Excel template
function downloadTemplate() {
    console.log('üìã Downloading Excel template...');
    try {
        const templateData = [
            {
                'H·ªç v√† t√™n': 'Nguy·ªÖn VƒÉn A',
                'M√£ nh√¢n vi√™n': '1001',
                'B·ªô ph·∫≠n': 'VF PTT H√Ä N·ªòI',
                'Ch·ª©c v·ª•': 'TVBH',
                'Email': 'nguyenvana@example.com',
                'Ng√†y c√¥ng th·ª±c t·∫ø': 25,
                'M·ª©c l∆∞∆°ng': 8500000,
                'T·ª∑ l·ªá h∆∞·ªüng': 100,
                'S·ªë xe k√Ω': 5,
                'L∆∞∆°ng tƒÉng ca': 500000,
                'Th∆∞·ªüng': 2000000,
                'Ph·ª• c·∫•p ƒÉn': 500000,
                'Ph·ª• c·∫•p tr√°ch nhi·ªám': 0,
                'BHXH': 0,
                'Kh·∫•u tr·ª´ ƒÉn': 0,
                'Kh·∫•u tr·ª´ qui ch·∫ø': 0,
                'Thu·∫ø TNCN': 0,
                'Kh·∫•u tr·ª´ kh√°c': 150000
            }
        ];
        
        const ws = XLSX.utils.json_to_sheet(templateData);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'Template');
        XLSX.writeFile(wb, 'Template_BangLuong_VTPA.xlsx');
        
        console.log('‚úÖ Template downloaded successfully');
        showSuccess('ƒê√£ t·∫£i template Excel th√†nh c√¥ng!');
    } catch (error) {
        console.error('‚ùå Template download error:', error);
        showError('L·ªói t·∫£i template: ' + error.message);
    }
}

// Bind all events
function bindButtonEvents() {
    console.log('üîó Binding button events...');
    
    // Manual form buttons
    const previewBtn = document.getElementById('previewBtn');
    const exportBtn = document.getElementById('exportBtn');
    const calculateBtn = document.getElementById('calculateBtn');
    
    if (previewBtn) {
        previewBtn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üîç Manual preview clicked');
            const button = this;
            setButtonLoading(button, true);
            setTimeout(() => {
                debugPreview();
                setButtonLoading(button, false);
            }, 500);
        });
    }
    
    if (exportBtn) {
        exportBtn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üìÑ Manual export clicked');
            const button = this;
            setButtonLoading(button, true);
            setTimeout(() => {
                debugExport();
                setButtonLoading(button, false);
            }, 500);
        });
    }
    
    if (calculateBtn) {
        calculateBtn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üßÆ Calculate clicked');
            calculateSalary();
        });
    }
    
    // Excel upload
    const excelFile = document.getElementById('excelFile');
    if (excelFile) {
        excelFile.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                debugUpload(file);
            }
        });
    }
    
    // Download template
    const downloadTemplateBtn = document.getElementById('downloadTemplateBtn');
    if (downloadTemplateBtn) {
        downloadTemplateBtn.addEventListener('click', function(e) {
            e.preventDefault();
            downloadTemplate();
        });
    }
    
    // Test connection
    const testConnectionBtn = document.getElementById('testConnectionBtn');
    if (testConnectionBtn) {
        testConnectionBtn.addEventListener('click', function(e) {
            e.preventDefault();
            debugConnection();
        });
    }
    
    // Modal controls
    const closeModal = document.getElementById('closeModal');
    const previewModal = document.getElementById('previewModal');
    const modalExportBtn = document.getElementById('modalExportBtn');
    
    if (closeModal) {
        closeModal.addEventListener('click', function() {
            console.log('‚ùå Modal closed');
            previewModal.style.display = 'none';
        });
    }
    
    if (modalExportBtn) {
        modalExportBtn.addEventListener('click', function() {
            console.log('üìÑ Modal export clicked');
            if (currentEmployeeData) {
                debugExport(currentEmployeeData);
            }
        });
    }
    
    // Close modal on backdrop click
    if (previewModal) {
        previewModal.addEventListener('click', function(e) {
            if (e.target === this) {
                console.log('‚ùå Modal closed via backdrop');
                this.style.display = 'none';
            }
        });
    }
    
    // ESC key to close modal
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && previewModal.style.display === 'block') {
            console.log('‚ùå Modal closed via ESC');
            previewModal.style.display = 'none';
        }
    });
    
    console.log('‚úÖ All button events bound successfully');
}

// Check logo load
function checkLogoLoad() {
    console.log('üñºÔ∏è Checking logo load...');
    const logo = document.getElementById('logo');
    if (logo.complete) {
        if (logo.naturalWidth === 0) {
            console.warn('‚ö†Ô∏è Logo failed to load, showing fallback');
            document.getElementById('logo-fallback').style.display = 'block';
            logo.style.display = 'none';
        } else {
            console.log('‚úÖ Logo loaded successfully');
        }
    }
}

// Initialize modals
function initializeModals() {
    console.log('üóÇÔ∏è Initializing modals...');
    // Modal initialization code here
}

// Setup form validation
function setupFormValidation() {
    console.log('üìù Setting up form validation...');
    
    // Add real-time validation
    const requiredFields = ['fullName', 'employeeId', 'email', 'baseSalary'];
    requiredFields.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (field) {
            field.addEventListener('input', function() {
                if (this.value.trim() === '') {
                    this.classList.add('border-red-500');
                } else {
                    this.classList.remove('border-red-500');
                }
            });
        }
    });
}

// Initialize everything when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ DOM loaded, binding events...');
    
    try {
        initializeTabs();
        bindButtonEvents();
        checkLogoLoad();
        initializeModals();
        setupFormValidation();
        
        console.log('‚úÖ All events bound successfully');
        showSuccess('H·ªá th·ªëng ƒë√£ s·∫µn s√†ng!');
        
        // Auto-calculate when form changes
        const formFields = document.querySelectorAll('#manualForm input, #manualForm select');
        formFields.forEach(field => {
            field.addEventListener('change', function() {
                if (document.getElementById('calculationResults').style.display !== 'none') {
                    calculateSalary();
                }
            });
        });
        
    } catch (error) {
        console.error('‚ùå Initialization error:', error);
        showError('L·ªói kh·ªüi t·∫°o h·ªá th·ªëng: ' + error.message);
    }
});

console.log('üìö VTPA Payroll System initialized - All debug functions ready'); 